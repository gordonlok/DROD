#
# -*- coding: utf-8 -*-
# @Time    : 2023/11/3 1:49
# @Author  : Sheng
# @File    : wilcox.py
# @Software: PyCharm
import numpy as np
import pandas as pd
import scipy.stats as stats
import matplotlib.pyplot as plt

from scipy.stats import wilcoxon
from scipy.stats import mannwhitneyu


Ours = [0.9154,0.5249,0.8603,0.9888,0.8598,0.8755,0.7431,0.9368,0.6290,0.9802,0.9537,0.5931,
        0.9400,0.7215,0.7873,0.9940,0.9748,0.7180,0.5217,0.6677]
Ours = np.array(Ours)

# KNN = [0.8326,0.5145,0.8377,0.8894,0.8867,0.7586,0.5861,0.8492,0.6,
#          0.4008,0.7848,0.4790,0.95,0.7233,0.6848,0.9696,0.9639,
#        0.7373,0.536,0.6443]
# KNN = np.array(KNN)
# KNNKFC = [0.8061 0.5323 0.8655 1.0000 0.8300 0.7755 0.6651 0.8499 0.5929 0.5249 0.8723 0.4773
# 0.9515 0.7255 0.6716 0.9223 0.9771 0.7381 0.5408 0.6821]
KNNKFC = [0.8061,0.5323,0.8655,1.0000,0.8300,0.7755,0.6651,0.8499,0.5929,0.5249,0.8723,0.4773,
            0.9515,0.7255,0.6716,0.9223,0.9771,0.7381,0.5408,0.6821]
KNNKFC = np.array(KNNKFC)

# LOFKFC # 0.7512 0.4932 0.8019 0.8014 0.8889 0.7557 0.6439 0.6766 0.5514 0.3921 0.4763 0.6426 0.8075 0.5827 0.5379 0.5894 0.9269 0.5579 0.5146 0.6511
LOFKFC = [0.7512,0.4932,0.8019,0.8014,0.8889,0.7557,0.6439,0.6766,0.5514,0.3921,0.4763,0.6426,
            0.8075,0.5827,0.5379,0.5894,0.9269,0.5579,0.5146,0.6511]
LOFKFC = np.array(LOFKFC)

# DGOFKFC # 0.8413 0.5600 0.7829 1.0000 0.8379 0.7691 0.6682 0.9322 0.5553 0.2776 0.8305 0.0000 0.9582 0.6967 0.6136 0.6424 0.9631 0.6892 0.5208 0.7151
DGOFKFC = [0.8413,0.5600,0.7829,1.0000,0.8379,0.7691,0.6682,0.9322,0.5553,0.2776,0.8305,0.0000,
            0.9582,0.6967,0.6136,0.6424,0.9631,0.6892,0.5208,0.7151]
DGOFKFC = np.array(DGOFKFC)

# IFOREST # 0.8977 0.4938 0.8008 0.9996 0.8503 0.7071 0.6940 0.9299 0.4872 0.7140 0.9481 0.4905 0.9799 0.6752 0.7076 0.9928 0.7600 0.7216 0.5139 0.6233
IFOREST = [0.8977,0.4938,0.8008,0.9996,0.8503,0.7071,0.6940,0.9299,0.4872,0.7140,0.9481,0.4905,
            0.9799,0.6752,0.7076,0.9928,0.7600,0.7216,0.5139,0.6233]

# CBLOF # 0.9083 0.4686 0.7913 1.0000 0.9013 0.7212 0.6278 0.8605 0.5170 0.7547 0.8912 0.4723 0.9428 0.6700 0.7373 0.9989 0.9214 0.7190 0.5950 0.5895
CBLOF = [0.9083,0.4686,0.7913,1.0000,0.9013,0.7212,0.6278,0.8605,0.5170,0.7547,0.8912,0.4723,
            0.9428,0.6700,0.7373,0.9989,0.9214,0.7190,0.5950,0.5895]

# OCSVM # 0.8903 0.4743 0.8204 0.8094 0.7395 0.5393 0.7872 0.9286 0.3660 0.5336 0.9354 0.4639 0.8437 0.6022 0.5972 0.9747 0.5507 0.6516 0.5075 0.5491
OCSVM = [0.8903,0.4743,0.8204,0.8094,0.7395,0.5393,0.7872,0.9286,0.3660,0.5336,0.9354,0.4639,
            0.8437,0.6022,0.5972,0.9747,0.5507,0.6516,0.5075,0.5491]

#ECOD # 0.9139 0.4813 0.7463 0.9559 0.7284 0.6035 0.7853 0.9350 0.3678 0.6045 0.9274 0.4697 0.9771 0.5944 0.5830 0.9649 0.5929 0.6974 0.5220 0.6083
ECOD = [0.9139,0.4813,0.7463,0.9559,0.7284,0.6035,0.7853,0.9350,0.3678,0.6045,0.9274,0.4697,
            0.9771,0.5944,0.5830,0.9649,0.5929,0.6974,0.5220,0.6083]

# COPOD # 0.8754 0.5233 0.7739 0.9463 0.7895 0.7339 0.6629 0.9219 0.4215 0.6824 0.9048 0.4911 0.9393 0.6540 0.6335 0.9745 0.4958 0.7343 0.6556 0.6946
COPOD = [0.8754,0.5233,0.7739,0.9463,0.7895,0.7339,0.6629,0.9219,0.4215,0.6824,0.9048,0.4911,
            0.9393,0.6540,0.6335,0.9745,0.4958,0.7343,0.6556,0.6946]




# another = KNNKFC / LOFKFC / DGOFKFC / IFOREST / CBLOF / OCSVM / ECOD / COPOD
another = COPOD
Ours_another = Ours - another
# 绝对值
absOurs_another = np.abs(Ours_another)
# 求每个数据的排名
sortOurs_another = absOurs_another.argsort().argsort() + 1
# 求Ours_another中正值对应的排名之和
sumOurs_another = sortOurs_another[Ours_another > 0].sum()
# 求Ours_another中负值对应的排名之和
sumOurs_another_ = sortOurs_another[Ours_another < 0].sum()

print("R+: ", sumOurs_another, "R-: ", sumOurs_another_)
print(wilcoxon(Ours, another))


